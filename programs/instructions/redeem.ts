/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token"
import * as beet from "@metaplex-foundation/beet"
import * as web3 from "@solana/web3.js"

/**
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export type RedeemInstructionArgs = {
  usdcToken: beet.bignum
  rewardToken: beet.bignum
}
/**
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export const redeemStruct = new beet.BeetArgsStruct<
  RedeemInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["usdcToken", beet.u64],
    ["rewardToken", beet.u64],
  ],
  "RedeemInstructionArgs"
)
/**
 * Accounts required by the _redeem_ instruction
 *
 * @property [] rewardData
 * @property [_writable_] rewardMint
 * @property [] usdcMint
 * @property [_writable_] customerRewardToken
 * @property [_writable_] customerUsdcToken
 * @property [_writable_] userUsdcToken
 * @property [_writable_] user
 * @property [_writable_, **signer**] customer
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export type RedeemInstructionAccounts = {
  rewardData: web3.PublicKey
  rewardMint: web3.PublicKey
  usdcMint: web3.PublicKey
  customerRewardToken: web3.PublicKey
  customerUsdcToken: web3.PublicKey
  userUsdcToken: web3.PublicKey
  user: web3.PublicKey
  customer: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const redeemInstructionDiscriminator = [
  184, 12, 86, 149, 70, 196, 97, 225,
]

/**
 * Creates a _Redeem_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export function createRedeemInstruction(
  accounts: RedeemInstructionAccounts,
  args: RedeemInstructionArgs,
  programId = new web3.PublicKey("AbnVVDtVsP6rFUKg5QJjsJZAK9sLfqmjRC5xTVfq4RmD")
) {
  const [data] = redeemStruct.serialize({
    instructionDiscriminator: redeemInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.customerRewardToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.customerUsdcToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userUsdcToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.customer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
